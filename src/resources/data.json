{
	"chapters": [
		{
			"title": "Раздел 1. Основы программирования нейронных сетей",
			"topics": [
				{
					"title": "Тема 1.1.  Введение в тематику искусственных нейронных сетей",
					"test": [
						{
							"question": "Выберите верные утверждения о глубокой нейронной сети",
							"multiple": true,
							"choice": [
								"это один из методов машинного обучения",
								"сеть из простых вычислительных элементов – искусственных нейронов",
								"полностью повторяет устройство нейронной сети человеческого головного мозга",
								"единственный метод создания систем искусственного интеллекта",
								"модель искусственного нейрона придумана на основе устройства нейрона в мозгу человека"
							],
							"answer": [
								"это один из методов машинного обучения",
								"сеть из простых вычислительных элементов – искусственных нейронов",
								"модель искусственного нейрона придумана на основе устройства нейрона в мозгу человека"
							]
						},
						{
							"question": "Почему активное практическое применение искусственных нейронных сетей стало возможным именно сейчас?",
							"multiple": true,
							"choice": [
								"разработаны базовые концепции нейронных сетей: свёрточные нейронные сети, алгоритм обратного распространения ошибки",
								"появились многоядерные процессоры и графические ускорители GPU",
								"накопилось огромное количество данных (в том числе размеченных)",
								"появились новые задачи, которые можно решить с помощью искусственных нейронных сетей",
								"придумана модель искусственного нейрона",
								"произошли качественные улучшения алгоритмов оптимизации обучения, функций активации"
							],
							"answer": [
								"появились многоядерные процессоры и графические ускорители GPU",
								"накопилось огромное количество данных (в том числе размеченных)",
								"произошли качественные улучшения алгоритмов оптимизации обучения, функций активации"
							]
						},
						{
							"question": "Можно сказать, что глубокое обучение является подразделом следующих областей",
							"multiple": true,
							"choice": [
								"высшая математика",
								"линейная алгебра",
								"машинное обучение",
								"программирование",
								"компьютерные сети",
								"искусственный интеллект"
							],
							"answer": [
								"машинное обучение",
								"искусственный интеллект"
							]
						},
						{
							"question": "Машинное обучение, а значит, и глубокие нейронные сети на выходе дают нам",
							"multiple": false,
							"choice": [
								"прибыль",
								"правила",
								"пользу",
								"ответы"
							],
							"answer": [
								"правила"
							]
						},
						{
							"question": "Нейронные сети на данный момент способны решать следующие задачи",
							"multiple": true,
							"choice": [
								"осознавать себя",
								"классифицировать изображения на уровне человека",
								"распознавать речь на уровне человека",
								"воссоздавать подобные себе алгоритмы",
								"управлять автомобилем на уровне, сравнимом с человеком"
							],
							"answer": [
								"классифицировать изображения на уровне человека",
								"распознавать речь на уровне человека",
								"управлять автомобилем на уровне, сравнимом с человеком"
							]
						},
						{
							"question": "Методика глубокого обучения имеет важные характеристики, отличающие ее от методики машинного обучения",
							"multiple": true,
							"choice": [
								"на основе данных и правильных ответов создает правила",
								"поэтапно, послойно конструирует все более сложные представления",
								"на основе правил и данных дает ответы",
								"исследует промежуточные представления совместно, за счет чего каждый слой обновляется в соответствии с информацией, полученной от представлений других слоев"
							],
							"answer": [
								"поэтапно, послойно конструирует все более сложные представления",
								"исследует промежуточные представления совместно, за счет чего каждый слой обновляется в соответствии с информацией, полученной от представлений других слоев"
							]
						},
						{
							"question": "Успешности нейронных сетей в наше время поспособствовало создание и усовершенствование следующих алгоритмов",
							"multiple": true,
							"choice": [
								"усовершенствование функций активации",
								"создание алгоритма обратного распространения ошибки",
								"создание сверточных нейронных сетей",
								"лучшие схемы оптимизации, такие как RMSProp и Adam",
								"создание алгоритма долгой краткосрочной памяти",
								"более оптимальные схемы инициализации весов"
							],
							"answer": [
								"усовершенствование функций активации",
								"лучшие схемы оптимизации, такие как RMSProp и Adam",
								"более оптимальные схемы инициализации весов"
							]
						},
						{
							"question": "В 2014–2016-х годах открыты более совершенные способы распространения градиента, которые помогли совершить прорыв в развитии глубокого обучения",
							"multiple": true,
							"choice": [
								"алгоритм обратного распространения ошибки",
								"пакетная нормализация",
								"алгоритм долгой краткосрочной памяти",
								"обходные связи",
								"отделимые свертки",
								"сверточные нейронные сети"
							],
							"answer": [
								"пакетная нормализация",
								"обходные связи",
								"отделимые свертки"
							]
						}
					]
				},
				{
					"title": "Тема 1.2. Модель искусственного нейрона.  Общее представление об искусственной нейронной сети",
					"test": [
						{
							"question": "Что делает сумматорная функция нейрона?",
							"multiple": false,
							"choice": [
								"суммирует произведения входных значений на их веса",
								"суммирует выходные значения",
								"суммирует веса нейронной сети",
								"суммирует входные значения"
							],
							"answer": [
								"суммирует произведения входных значений на их веса"
							]
						},
						{
							"question": "Какие базовые типы слоев нейронной сети вы знаете?",
							"multiple": true,
							"choice": [
								"выходной слой",
								"дополнительный слой",
								"скрытый слой",
								"входной слой",
								"суммирующий слой",
								"пороговый слой"
							],
							"answer": [
								"выходной слой",
								"скрытый слой",
								"входной слой"
							]
						},
						{
							"question": "Входы искусственной нейронной сети — это",
							"multiple": false,
							"choice": [
								"математическая функция",
								"дендриты",
								"математический вектор чисел",
								"аксоны"
							],
							"answer": [
								"математический вектор чисел"
							]
						},
						{
							"question": "Функция активации — это",
							"multiple": false,
							"choice": [
								"синапс",
								"сумма произведений входных данных на их веса",
								"функция, преобразовывающая входные сигналы перед их попаданием в сумматор",
								"функция, преобразовывающая результат суммирующей функции в некий ответ, который можно интерпретировать"
							],
							"answer": [
								"функция, преобразовывающая результат суммирующей функции в некий ответ, который можно интерпретировать"
							]
						},
						{
							"question": "Веса искусственной нейронной сети — это",
							"multiple": false,
							"choice": [
								"аксоны",
								"функция, которая выдает ответ",
								"математический вектор чисел",
								"синапсы"
							],
							"answer": [
								"математический вектор чисел"
							]
						},
						{
							"question": "На вход функции активации Хэвисайда подано число 5. Известно, что ее смещение (bias) равно 10. Функция активации вернет",
							"multiple": false,
							"choice": [
								"0",
								"1",
								"10",
								"0,5"
							],
							"answer": [
								"0"
							]
						},
						{
							"question": "На вход сигмоидальной функции активации пришло число -0,89. Функция вернет",
							"multiple": false,
							"choice": [
								"0,89",
								"0,29",
								"-1,0",
								"0,0",
								"0,71"
							],
							"answer": [
								"0,29"
							]
						},
						{
							"question": "На вход функции активации гиперболический тангенс пришло число -0,89. Функция вернет",
							"multiple": false,
							"choice": [
								"-0,71",
								"0,71",
								"0,29",
								"1,0",
								"0,0"
							],
							"answer": [
								"-0,71"
							]
						},
						{
							"question": "На вход функции активации ReLU пришло число -0,89. Функция вернет",
							"multiple": false,
							"choice": [
								"0,0",
								"0,71",
								"0,89",
								"-1,0",
								"-0,89",
								"1,0"
							],
							"answer": [
								"0,0"
							]
						},
						{
							"question": "Нейронная сеть с возможностью обратных связей называется",
							"multiple": false,
							"choice": [
								"сверточная нейронная сеть",
								"полносвязная нейронная сеть",
								"обратная нейронная сеть",
								"рекуррентная нейронная сеть"
							],
							"answer": [
								"рекуррентная нейронная сеть"
							]
						}
					]
				},
				{
					"title": "Тема 1.3. Библиотеки для обучения  нейронных сетей",
					"test": [
						{
							"question": "Какие две базовые задачи решают нейронные сети?",
							"multiple": true,
							"choice": [
								"оптимизация",
								"классификация",
								"регрессия",
								"поиск",
								"систематизация"
							],
							"answer": [
								"классификация",
								"регрессия"
							]
						},
						{
							"question": "Какие типы обучения нейронной сети существуют?",
							"multiple": true,
							"choice": [
								"обучение с учителем",
								"обучение на правилах",
								"обучение по книгам",
								"обучение без учителя",
								"обучение с подкреплением",
								"обучение с осознанием"
							],
							"answer": [
								"обучение с учителем",
								"обучение без учителя",
								"обучение с подкреплением"
							]
						},
						{
							"question": "Традиционный подход к обучению нейронных сетей требовал глубокого понимания",
							"multiple": true,
							"choice": [
								"определенных разделов математики",
								"устройства нейронной сети головного мозга",
								"программирования",
								"базовых принципов обучения живых существ",
								"многоядерных процессоров, многопроцессорных систем, ускорителей вычислений"
							],
							"answer": [
								"определенных разделов математики",
								"программирования",
								"многоядерных процессоров, многопроцессорных систем, ускорителей вычислений"
							]
						},
						{
							"question": "Назовите две наиболее популярные библиотеки для создания искусственных нейронных сетей",
							"multiple": true,
							"choice": [
								"Caffe",
								"TensorFlow",
								"Theano",
								"PyTorch",
								"Darknet"
							],
							"answer": [
								"TensorFlow",
								"PyTorch"
							]
						},
						{
							"question": "Корректировать веса нейронов в ходе обучения помогает",
							"multiple": false,
							"choice": [
								"алгоритм обучения",
								"алгоритм обратного распространения ошибки",
								"алгоритм внимания",
								"алгоритм обновления весов"
							],
							"answer": [
								"алгоритм обратного распространения ошибки"
							]
						},
						{
							"question": "Нейронная сеть, обучающаяся без учителя, способна решать следующие задачи",
							"multiple": true,
							"choice": [
								"классификация",
								"кластеризация",
								"регрессия",
								"систематизация",
								"сокращение размерности"
							],
							"answer": [
								"кластеризация",
								"сокращение размерности"
							]
						},
						{
							"question": "Существуют следующие подходы к реализации процесса обучения",
							"multiple": true,
							"choice": [
								"полное обучение",
								"частичное обучение",
								"онлайн-обучение",
								"обучение на мини-выборках",
								"обучение с подкреплением"
							],
							"answer": [
								"полное обучение",
								"онлайн-обучение",
								"обучение на мини-выборках"
							]
						},
						{
							"question": "Назовите библиотеку программирования нейронных сетей верхнего уровня, которая использует в качестве вычислительного back-end TensorFlow или Theano",
							"multiple": false,
							"choice": [
								"Theano",
								"Keras",
								"PyTorch",
								"Caffe",
								"CNTK"
							],
							"answer": [
								"Keras"
							]
						}
					]
				},
				{
					"title": "Тема 1.4. Распознавание предметов одежды. Обзор набора данных и выбор архитектуры нейронной сети",
					"test": [
						{
							"question": "Выберите верные утверждения о наборе Fashion MNIST",
							"multiple": true,
							"choice": [
								"размер изображений 32х32 пикселя",
								"изображения цветные",
								"каждое изображение даст на вход нейронной сети 784 признака",
								"размер изображений 28х28 пикселей",
								"набор имеет 9 типов объектов",
								"изображения черно-белые",
								"каждое изображение даст на вход нейронной сети 1024 признака",
								"набор имеет 10 типов объектов"
							],
							"answer": [
								"каждое изображение даст на вход нейронной сети 784 признака",
								"размер изображений 28х28 пикселей",
								"изображения черно-белые",
								"набор имеет 10 типов объектов"
							]
						},
						{
							"question": "Дан набор данных с пятью классами. Классы обозначены метками от 0 до 4. Выберите варианты, где метки классов закодированы верно. Использован подход One Hot Encoding",
							"multiple": true,
							"choice": [
								"1 → [0, 1, 0, 0, 0, 0]",
								"2 → [0, 0, 1, 0, 0]",
								"3 → [0, 0, 0, 3, 0]",
								"5 → [0, 0, 0, 0, 0, 1]",
								"0 → [1, 0, 0, 0, 0]",
								"4 → [0, 0, 0, 0, 1]"
							],
							"answer": [
								"2 → [0, 0, 1, 0, 0]",
								"0 → [1, 0, 0, 0, 0]",
								"4 → [0, 0, 0, 0, 1]"
							]
						},
						{
							"question": "Размер входного изображения 15х15. В первом слое 200 нейронов. Для первого скрытого слоя придется обучить следующее число весов",
							"multiple": false,
							"choice": [
								"12000",
								"300",
								"225",
								"200",
								"45000",
								"3000",
								"15"
							],
							"answer": [
								"45000"
							]
						},
						{
							"question": "Дано цветное изображение 100х100 пикселей. На вход нейронной сети попадет следующее число параметров",
							"multiple": false,
							"choice": [
								"300",
								"100",
								"30000",
								"10000"
							],
							"answer": [
								"30000"
							]
						},
						{
							"question": "Полносвязная нейронная сеть имеет следующие крупные недостатки",
							"multiple": true,
							"choice": [
								"недостатков нет",
								"с ростом числа входных данных слишком быстро растет число параметров, которые нужно обучить",
								"проблема затухающего градиента",
								"плохо решает задачу классификации",
								"плохо решает задачу регрессии"
							],
							"answer": [
								"с ростом числа входных данных слишком быстро растет число параметров, которые нужно обучить",
								"проблема затухающего градиента"
							]
						},
						{
							"question": "Параметр units слоя Dense обозначает",
							"multiple": false,
							"choice": [
								"количество слоев в нейронной сети",
								"функцию активации в данном слое",
								"количество нейронов в данном слое",
								"количество входных данных"
							],
							"answer": [
								"количество нейронов в данном слое"
							]
						},
						{
							"question": "Количество нейронов на последнем слое зависит от",
							"multiple": false,
							"choice": [
								"возможности подбирать произвольно",
								"количества категорий, которые нужно классифицировать",
								"количества входных данных",
								"количества слоев в нейронной сети"
							],
							"answer": [
								"количества категорий, которые нужно классифицировать"
							]
						},
						{
							"question": "Dense — это",
							"multiple": false,
							"choice": [
								"нейрон",
								"слой нейронной сети",
								"модель нейронной сети",
								"функция активации"
							],
							"answer": [
								"слой нейронной сети"
							]
						}
					]
				},
				{
					"title": "Тема 1.5. Распознавание предметов одежды. Построение архитектуры нейронной сети и ее обучение",
					"test": [
						{
							"question": "Для распознавания моделей одежды была создана нейронная сеть. Выберите верные утверждения о ней",
							"multiple": true,
							"choice": [
								"полносвязная нейронная сеть",
								"в сети 1 слой",
								"рекуррентная нейронная сеть",
								"выходной слой содержал 10 нейронов",
								"входной слой содержал 784 нейрона",
								"обычная нейронная сеть",
								"скрытый слой содержал 800 нейронов",
								"в ней 3 слоя",
								"скрытый слой содержал 10 нейронов",
								"входной слой содержал 800 нейронов",
								"в сети 2 слоя",
								"выходной слой содержал 800 нейронов"
							],
							"answer": [
								"полносвязная нейронная сеть",
								"выходной слой содержал 10 нейронов",
								"входной слой содержал 800 нейронов",
								"в сети 2 слоя"
							]
						},
						{
							"question": "Для распознавания моделей одежды была создана нейронная сеть. Выберите параметры, которые передавались при компиляции",
							"multiple": true,
							"choice": [
								"функция потерь – adam",
								"метрика качества – categorical_crossentropy",
								"оптимизатор обучения – adam",
								"функция потерь – categorical_crossentropy",
								"метрика качества – sgd",
								"оптимизатор обучения – accuracy",
								"функция потерь – binary_crossentropy",
								"метрика качества – accuracy",
								"оптимизатор обучения – sgd"
							],
							"answer": [
								"оптимизатор обучения – adam",
								"функция потерь – categorical_crossentropy",
								"метрика качества – accuracy"
							]
						},
						{
							"question": "Для задачи регрессии чаще всего применяют следующие метрики качества",
							"multiple": true,
							"choice": [
								"Accuracy",
								"MAE",
								"Precision",
								"Recall",
								"MSE",
								"Cross Entropy"
							],
							"answer": [
								"MAE",
								"MSE"
							]
						},
						{
							"question": "Для задачи классификации можно применить следующие метрики качества",
							"multiple": true,
							"choice": [
								"Accuracy",
								"MAE",
								"Precision",
								"Recall",
								"MSE",
								"Cross Entropy"
							],
							"answer": [
								"Accuracy",
								"Precision",
								"Recall",
								"Cross Entropy"
							]
						},
						{
							"question": "Если решается задача бинарной классификации на несбалансированном наборе данных, то можно применить следующие метрики качества",
							"multiple": true,
							"choice": [
								"Accuracy",
								"MAE",
								"Precision",
								"Recall",
								"MSE",
								"Cross Entropy"
							],
							"answer": [
								"Precision",
								"Recall",
								"Cross Entropy"
							]
						},
						{
							"question": "Если решается задача многоклассовой классификации на несбалансированном наборе данных, то можно применить следующие метрики качества",
							"multiple": false,
							"choice": [
								"MAE",
								"Precision",
								"Cross Entropy",
								"Recall",
								"MSE",
								"Accuracy"
							],
							"answer": [
								"Cross Entropy"
							]
						},
						{
							"question": "Пусть класс 0 – гриб ядовитый, класс 1 – неядовитый. Нейронная сеть предсказала, что гриб неядовитый с вероятностью 0,90. На самом деле гриб ядовитый. Бинарная кросс энтропия (Cross Entropy) вернет следующее значение (считаем, что в формуле используется натуральный логарифм)",
							"multiple": false,
							"choice": [
								"1,0",
								"0,0",
								"2,9",
								"-2,3",
								"2,3"
							],
							"answer": [
								"2,3"
							]
						},
						{
							"question": "Следующие метрики могут быть использованы и как функции потерь",
							"multiple": true,
							"choice": [
								"Accuracy",
								"MAE",
								"Precision",
								"Recall",
								"MSE",
								"Cross Entropy"
							],
							"answer": [
								"MAE",
								"MSE",
								"Cross Entropy"
							]
						}
					]
				},
				{
					"title": "Тема 1.6. Анализ качества обучения нейронной сети",
					"test": [
						{
							"question": "При загрузке данных из стандартных наборов данных Kears функция load_data() возвращает следующие данные",
							"multiple": true,
							"choice": [
								"x_validation",
								"x_train",
								"y_data",
								"y_test",
								"y_validation",
								"x_data",
								"y_train",
								"x_test"
							],
							"answer": [
								"x_train",
								"y_test",
								"y_train",
								"x_test"
							]
						},
						{
							"question": "Верные утверждения про проверочный набор данных в Keras и TensorFlow",
							"multiple": true,
							"choice": [
								"проверяет полностью обученную нейронную сеть после ее обучения и дает истинную оценку качества модели",
								"загружается автоматически при вызове функции load_data()",
								"его можно выделить при помощи параметра validation_split",
								"применяется для подбора гиперпараметров нейронной сети",
								"применяется для подбора параметров нейронной сети",
								"проверяет качество нейронной сети после каждой эпохи ее обучения",
								"на основе оценок качества модели на проверочном наборе данных можно сделать заключение о переобучении модели нейронной сети"
							],
							"answer": [
								"его можно выделить при помощи параметра validation_split",
								"применяется для подбора гиперпараметров нейронной сети",
								"проверяет качество нейронной сети после каждой эпохи ее обучения",
								"на основе оценок качества модели на проверочном наборе данных можно сделать заключение о переобучении модели нейронной сети"
							]
						},
						{
							"question": "Для правдоподобной оценки качества обученной модели используют",
							"multiple": false,
							"choice": [
								"валидирующий набор",
								"тестовый набор",
								"проверочный набор",
								"тренировочный набор"
							],
							"answer": [
								"тестовый набор"
							]
						},
						{
							"question": "Высокое качество модели при проверке на тренировочных данных и одновременно низкое качество при проверке на тестовом наборе говорит о том, что",
							"multiple": false,
							"choice": [
								"модель переобучилась",
								"задача решена успешно",
								"задача нерешаема в принципе",
								"нужно сделать еще несколько эпох обучения"
							],
							"answer": [
								"модель переобучилась"
							]
						},
						{
							"question": "Для борьбы с переобучением можно",
							"multiple": true,
							"choice": [
								"увеличить объем обучающей выборки",
								"ничего не делать",
								"уменьшить сложность нейронной сети",
								"сделать еще несколько эпох обучения"
							],
							"answer": [
								"увеличить объем обучающей выборки",
								"уменьшить сложность нейронной сети"
							]
						},
						{
							"question": "Гиперпараметрами нейронной сети являются",
							"multiple": true,
							"choice": [
								"веса нейронной сети",
								"количество слоев нейронной сети",
								"количество нейронов в слое нейронной сети",
								"смещение нейронов",
								"функции активации",
								"функция ошибок"
							],
							"answer": [
								"количество слоев нейронной сети",
								"количество нейронов в слое нейронной сети",
								"функции активации",
								"функция ошибок"
							]
						},
						{
							"question": "Параметрами нейронной сети являются",
							"multiple": true,
							"choice": [
								"веса нейронной сети",
								"количество слоев нейронной сети",
								"количество нейронов в слое нейронной сети",
								"смещение нейронов",
								"функции активации",
								"функция ошибок"
							],
							"answer": [
								"веса нейронной сети",
								"смещение нейронов"
							]
						},
						{
							"question": "Для подбора гиперпараметров служит",
							"multiple": false,
							"choice": [
								"тестовый набор",
								"тренировочный набор",
								"параметрический набор",
								"проверочный набор"
							],
							"answer": [
								"проверочный набор"
							]
						}
					]
				}
			]
		},
		{
			"title": "Раздел 2. Обучение искусственной нейронной сети",
			"topics": [
				{
					"title": "Тема 2.1. Обучение искусственного нейрона",
					"test": [
						{
							"question": "Методы градиентного спуска используют для",
							"multiple": false,
							"choice": [
								"сбора обучающей выборки",
								"подбора весов модели искусственного нейрона",
								"расчета функции ошибки",
								"вычисления выхода искусственного нейрона"
							],
							"answer": [
								"подбора весов модели искусственного нейрона"
							]
						},
						{
							"question": "В методе стохастического градиентного спуска градиент функции ошибки рассчитывается на",
							"multiple": false,
							"choice": [
								"на подмножестве «mini-batch» обучающей выборки",
								"на всей обучающей выборке",
								"одном элементе обучающей выборки"
							],
							"answer": [
								"одном элементе обучающей выборки"
							]
						},
						{
							"question": "В методе градиентного спуска 1. Изменяются веса 2. Добавляется элемент в обучающую выборку 3. Вычисляется градиент",
							"multiple": false,
							"choice": [
								"1,2",
								"2,1",
								"2,3",
								"3,1",
								"1,2,3"
							],
							"answer": [
								"3,1"
							]
						},
						{
							"question": "Обучающая выборка – это",
							"multiple": false,
							"choice": [
								"набор функций активации",
								"набор весов нейрона",
								"набор входов нейрона",
								"набор пар (входной вектор, правильный ответ)"
							],
							"answer": [
								"набор пар (входной вектор, правильный ответ)"
							]
						},
						{
							"question": "MSE используется в задачах",
							"multiple": false,
							"choice": [
								"регрессии",
								"бинарной классификации",
								"категоризации",
								"классификации"
							],
							"answer": [
								"регрессии"
							]
						},
						{
							"question": "Обучение нейрона – это",
							"multiple": false,
							"choice": [
								"сбор обучающей выборки",
								"подбор весов нейрона",
								"вычисление ответа нейрона"
							],
							"answer": [
								"подбор весов нейрона"
							]
						}
					]
				},
				{
					"title": "Тема 2.2. Обучение искусственной нейронной сети. Метод обратного распространения ошибки",
					"test": [
						{
							"question": "Скрытым слоем искусственной нейронной сети называется",
							"multiple": false,
							"choice": [
								"первый слой, получающий на вход элементы вектора признаков",
								"слой между входным и выходным слоем",
								"последний слой, дающий ответ сети"
							],
							"answer": [
								"слой между входным и выходным слоем"
							]
						},
						{
							"question": "Цепное правило используется для",
							"multiple": false,
							"choice": [
								"сбора обучающей выборки",
								"расчета выхода искусственной нейронной сети",
								"расчета градиента для изменения весов внутренних слоев"
							],
							"answer": [
								"расчета градиента для изменения весов внутренних слоев"
							]
						},
						{
							"question": "На каком этапе вносятся изменения в модификациях SGD?",
							"multiple": false,
							"choice": [
								"инициализация весов",
								"модификация весов",
								"расчет градиента",
								"вычисление функции ошибки"
							],
							"answer": [
								"модификация весов"
							]
						},
						{
							"question": "В методе RMSprop используется модификация градиентного спуска",
							"multiple": false,
							"choice": [
								"масштабирование градиента",
								"инерционная",
								"обе модификации"
							],
							"answer": [
								"масштабирование градиента"
							]
						},
						{
							"question": "В методе градиентного спуска 1. Изменяются веса 2. Вычисляется градиент 3. Добавляется слой сети Выберите правильный порядок действий",
							"multiple": false,
							"choice": [
								"1,2",
								"2,1",
								"2,3",
								"3,1",
								"1,2,3"
							],
							"answer": [
								"2,1"
							]
						},
						{
							"question": "Обучающая выборка – это",
							"multiple": false,
							"choice": [
								"набор правильных ответов сети",
								"набор весов модели",
								"набор пар (входной вектор, правильный ответ)"
							],
							"answer": [
								"набор пар (входной вектор, правильный ответ)"
							]
						},
						{
							"question": "Процесс прямого распространения сигнала в сети – это",
							"multiple": false,
							"choice": [
								"распространение ошибки ответа сети от выходного слоя к входному",
								"передача сигнала от нейрона предыдущего слоя к нейрону следующего слоя",
								"распространение сигнала от входного вектора от входного слоя к выходному"
							],
							"answer": [
								"распространение сигнала от входного вектора от входного слоя к выходному"
							]
						},
						{
							"question": "Метод AdaGrad – это модификация SGD на основе инерции",
							"multiple": false,
							"choice": [
								"да",
								"нет"
							],
							"answer": [
								"нет"
							]
						},
						{
							"question": "Метод Nag – это модификация SGD на основе инерции",
							"multiple": false,
							"choice": [
								"да",
								"нет"
							],
							"answer": [
								"да"
							]
						},
						{
							"question": "В методе Adadelta используется модификация градиентного спуска",
							"multiple": false,
							"choice": [
								"инерционная",
								"масштабирование градиента",
								"обе модификации"
							],
							"answer": [
								"обе модификации"
							]
						}
					]
				}
			]
		},
		{
			"title": "Раздел 3. Нейронные сети для анализа табличных данных",
			"topics": [
				{
					"title": "Тема 3.1. Применение нейронных сетей для решения задачи регрессии",
					"test": [
						{
							"question": "Верными утверждениями о выбранной в лекции архитектуре нейронной сети для решения задачи регрессии являются",
							"multiple": true,
							"choice": [
								"последовательная модель нейронной сети",
								"количество входных признаков – 64",
								"содержит 3 слоя",
								"количество выходных нейронов – 32",
								"количество нейронов на скрытом слое – 32",
								"рекуррентная нейронная сеть",
								"полносвязная нейронная сеть",
								"содержит 2 слоя",
								"количество входных признаков – 8",
								"количество нейронов на скрытом слое – 64",
								"количество выходных нейронов – 1"
							],
							"answer": [
								"последовательная модель нейронной сети",
								"содержит 3 слоя",
								"количество нейронов на скрытом слое – 32",
								"полносвязная нейронная сеть",
								"количество входных признаков – 8",
								"количество выходных нейронов – 1"
							]
						},
						{
							"question": "При решении задач регрессии на выходном слое правильным будет использовать следующие функции активации",
							"multiple": true,
							"choice": [
								"softmax",
								"tanh",
								"relu",
								"sigmoid",
								"не использовать функцию активации"
							],
							"answer": [
								"relu",
								"не использовать функцию активации"
							]
						},
						{
							"question": "Существуют следующие типы задач классификации и регрессии",
							"multiple": true,
							"choice": [
								"бинарная регрессия",
								"многоклассовая классификация",
								"регрессия",
								"многозначная регрессия",
								"бинарная классификация",
								"многозначная классификация",
								"каскадная классификация"
							],
							"answer": [
								"многоклассовая классификация",
								"регрессия",
								"бинарная классификация",
								"многозначная классификация"
							]
						},
						{
							"question": "Функция активации sigmoid на выходном слое используется при решении следующих задач",
							"multiple": true,
							"choice": [
								"многоклассовая классификация",
								"регрессия",
								"бинарная классификация",
								"многозначная классификация"
							],
							"answer": [
								"бинарная классификация",
								"многозначная классификация"
							]
						},
						{
							"question": "При решении задачи регрессии вы поместите на последний слой следующее количество нейронов",
							"multiple": false,
							"choice": [
								"2",
								"10",
								"1",
								"по числу возможных выходных данных"
							],
							"answer": [
								"по числу возможных выходных данных"
							]
						},
						{
							"question": "При решении задачи многоклассовой классификации вы примените",
							"multiple": false,
							"choice": [
								"функцию активации sigmoid",
								"функцию активации Relu",
								"функцию активации elu",
								"функцию активации softmax"
							],
							"answer": [
								"функцию активации softmax"
							]
						},
						{
							"question": "При решении задачи многозначной классификации вы примените",
							"multiple": false,
							"choice": [
								"функцию активации softmax",
								"функцию активации Relu",
								"функцию активации elu",
								"функцию активации sigmoid"
							],
							"answer": [
								"функцию активации sigmoid"
							]
						},
						{
							"question": "Если вы хотите получить среднее абсолютных отклонений выраженное в процентах, то примените функцию ошибки",
							"multiple": false,
							"choice": [
								"MAPE",
								"MAE",
								"MSE",
								"RMSE"
							],
							"answer": [
								"MAPE"
							]
						}
					]
				}
			]
		},
		{
			"title": "Раздел 4. Нейронные сети для задачи анализа изображений",
			"topics": [
				{
					"title": "Тема 4.1. Сверточные нейронные сети",
					"test": [
						{
							"question": "Недостатками полносвязных нейронных сетей для решения задач обработки изображений являются",
							"multiple": true,
							"choice": [
								"наличие многочисленных связей между нейронами",
								"некорректность работы функции активации при обработке изображений",
								"необходимость обучения слишком многих параметров",
								"соответствие роста размера изображения и числа связей между нейронами",
								"игнорирование пространственной структуры данных",
								"недостатков нет"
							],
							"answer": [
								"наличие многочисленных связей между нейронами",
								"необходимость обучения слишком многих параметров",
								"соответствие роста размера изображения и числа связей между нейронами",
								"игнорирование пространственной структуры данных"
							]
						},
						{
							"question": "Важными элементами сверточной нейронной сети являются",
							"multiple": true,
							"choice": [
								"полносвязный слой",
								"сверточный слой",
								"слой с обратной связью",
								"слой подвыборки",
								"ядро свертки",
								"ядро подвыборки",
								"пространственный слой"
							],
							"answer": [
								"сверточный слой",
								"слой подвыборки",
								"ядро свертки"
							]
						},
						{
							"question": "Дано изображение 100х100. Дан один сверточный слой с одним сверточным ядром 3х3. Нужно будет обучить",
							"multiple": false,
							"choice": [
								"10000 весов",
								"90000 весов",
								"9 весов",
								"30000 весов",
								"100 весов"
							],
							"answer": [
								"9 весов"
							]
						},
						{
							"question": "Для снижения размерности изображения вы примените",
							"multiple": false,
							"choice": [
								"ядро свертки",
								"сверточный слой",
								"полносвязный слой",
								"слой подвыборки"
							],
							"answer": [
								"слой подвыборки"
							]
						},
						{
							"question": "Классическая архитектура нейронной сети для распознавания рукописных цифр называется",
							"multiple": false,
							"choice": [
								"LeNet 5",
								"AlexNet",
								"VGG",
								"ResNet",
								"Inception"
							],
							"answer": [
								"LeNet 5"
							]
						},
						{
							"question": "На последнем слое сверточной нейронной сети для решения задачи классификации вы примените",
							"multiple": false,
							"choice": [
								"рекуррентный слой",
								"полносвязный слой",
								"слой подвыборки",
								"сверточный слой"
							],
							"answer": [
								"полносвязный слой"
							]
						},
						{
							"question": "Дано изображение размерностью 28х28. К нему применили слой подвыборки (2, 2). Размерность изображения теперь",
							"multiple": false,
							"choice": [
								"24х24",
								"26х26",
								"28х28",
								"14х14"
							],
							"answer": [
								"14х14"
							]
						},
						{
							"question": "Если вы наблюдаете процесс переобучения, то можете применить следующий слой",
							"multiple": false,
							"choice": [
								"Conv2D",
								"Dropout",
								"Dense",
								"MaxPooling2D",
								"AveragePooling2D"
							],
							"answer": [
								"Dropout"
							]
						}
					]
				},
				{
					"title": "Тема 4.2. Распознавание объектов на изображении",
					"test": [
						{
							"question": "Выберите верные утверждения про архитектуру нейронной сети, которая используется для распознавания изображений из набора CIFAR-10",
							"multiple": true,
							"choice": [
								"содержит 4 сверточных блока",
								"содержит 2 слоя подвыборки",
								"содержит 1 полносвязный слой",
								"содержит 4 слоя подвыборки",
								"первый сверточный слой содержит 3 карты признаков",
								"последний сверточный слой содержит 64 карты признаков",
								"содержит 2 полносвязных слоя",
								"содержит 4 сверточных слоя",
								"последний сверточный слой содержит 3 карты признаков",
								"первый сверточный слой содержит 32 карты признаков",
								"содержит 2 сверточных блока"
							],
							"answer": [
								"содержит 2 слоя подвыборки",
								"последний сверточный слой содержит 64 карты признаков",
								"содержит 2 полносвязных слоя",
								"содержит 4 сверточных слоя",
								"первый сверточный слой содержит 32 карты признаков",
								"содержит 2 сверточных блока"
							]
						},
						{
							"question": "Слой, позволяющий перейти от сверточной части нейронной сети к полносвязной, — это",
							"multiple": false,
							"choice": [
								"Conv1D",
								"Dropout",
								"BatchNormalization",
								"Flatten",
								"Dense",
								"Conv2D"
							],
							"answer": [
								"Flatten"
							]
						},
						{
							"question": "Дано изображение размерностью 28х28. К нему применили слой свертки с ядром свертки (5, 5). Размерность изображения теперь",
							"multiple": false,
							"choice": [
								"26х26",
								"28х28",
								"24х24",
								"14х14"
							],
							"answer": [
								"24х24"
							]
						},
						{
							"question": "Дано изображение размерностью 32х32. К данному изображению можно применить следующее количество слоев подвыборки",
							"multiple": false,
							"choice": [
								"3",
								"5",
								"4",
								"2",
								"сколько угодно",
								"1"
							],
							"answer": [
								"5"
							]
						},
						{
							"question": "Дано изображение размерностью 32х32. К нему применили слой свертки с 32 ядрами свертки (5, 5). Размерность сверточного слоя будет",
							"multiple": false,
							"choice": [
								"(28, 28, 32)",
								"(30, 30, 32)",
								"(28, 28)",
								"(30, 30)"
							],
							"answer": [
								"(28, 28, 32)"
							]
						},
						{
							"question": "Если вы хотите, чтобы разрешение изображения не менялось при применении операции свертки, то примените параметр",
							"multiple": false,
							"choice": [
								"kernel_size, равный размерности изображения",
								"padding=“same“",
								"filters, равный количеству пикселей в изображении",
								"padding=“valid“"
							],
							"answer": [
								"padding=“same“"
							]
						},
						{
							"question": "За размер ядра свертки в сверточном слое отвечает параметр",
							"multiple": false,
							"choice": [
								"kernel_size",
								"filters",
								"batch_size",
								"padding"
							],
							"answer": [
								"kernel_size"
							]
						},
						{
							"question": "Вы хотите провести операцию подвыборки, уменьшая изображение за счет усреднения значений пикселей, тогда вы примените",
							"multiple": false,
							"choice": [
								"MeanPooling2D",
								"Dropout",
								"MaxPooling2D",
								"AverageConv2D",
								"AveragePooling2D"
							],
							"answer": [
								"AveragePooling2D"
							]
						}
					]
				},
				{
					"title": "Тема 4.3. Предварительно обученные нейронные сети",
					"test": [
						{
							"question": "Верные утверждения про архитектуру предварительно обученной нейронной сети VGG16",
							"multiple": true,
							"choice": [
								"содержит 19 слоев",
								"содержит 6 блоков сверточных слоев",
								"последний сверточный слой содержит 64 карты признаков",
								"содержит 5 блоков сверточных слоев",
								"содержит 16 настраиваемых слоев",
								"последний сверточный слой содержит 512 карт признаков",
								"содержит 3 слоя подвыборки",
								"содержит 5 слоев подвыборки"
							],
							"answer": [
								"содержит 5 блоков сверточных слоев",
								"содержит 16 настраиваемых слоев",
								"последний сверточный слой содержит 512 карт признаков",
								"содержит 5 слоев подвыборки"
							]
						},
						{
							"question": "Для работы с предварительно обученными нейронными сетями используют следующие вспомогательные инструменты",
							"multiple": true,
							"choice": [
								"preprocess_input",
								"weights",
								"to_categorical",
								"preprocess_uotput",
								"decode_predictions",
								"image",
								"utils"
							],
							"answer": [
								"preprocess_input",
								"decode_predictions"
							]
						},
						{
							"question": "Многие предварительно обученные нейронные сети обучаются на основе подмножества набора данных",
							"multiple": false,
							"choice": [
								"Recognition Challenge set",
								"ImageNet",
								"Large Scale Visual set",
								"BigImageNet"
							],
							"answer": [
								"ImageNet"
							]
						},
						{
							"question": "В сверточной нейронной сети VGG16 присутствует следующее число сверточных блоков",
							"multiple": false,
							"choice": [
								"16",
								"6",
								"3",
								"5"
							],
							"answer": [
								"5"
							]
						},
						{
							"question": "В сверточной нейронной сети VGG16 присутствует следующее число полносвязных слоев",
							"multiple": false,
							"choice": [
								"3",
								"2",
								"1",
								"6"
							],
							"answer": [
								"3"
							]
						},
						{
							"question": "Максимальное число сверточных ядер, которое применяется в сети VGG16, равно",
							"multiple": false,
							"choice": [
								"64",
								"512",
								"256",
								"128"
							],
							"answer": [
								"512"
							]
						},
						{
							"question": "Архитектура нейронной сети, которая использует непоследовательные преобразования, периодически объединяя (суммированием) выход текущего слоя с выходом слоя, который был обработан на несколько шагов ранее:",
							"multiple": false,
							"choice": [
								"VGG16",
								"Inception",
								"Exception",
								"ResNet"
							],
							"answer": [
								"ResNet"
							]
						},
						{
							"question": "Архитектура нейронной сети, основанная на блоках с древовидной архитектурой, которые параллельно применяет к слою несколько операций, а затем агрегирует всю информацию снова в одни слой:",
							"multiple": false,
							"choice": [
								"VGG16",
								"Inception",
								"DenseNet",
								"ResNet"
							],
							"answer": [
								"Inception"
							]
						}
					]
				},
				{
					"title": "Тема 4.4. Перенос обучения в нейронных сетях",
					"test": [
						{
							"question": "Если вы хотите использовать нейронную сеть VGG16 для распознавания объектов, которые не входят в набор ImageNet, то вам необходимо",
							"multiple": false,
							"choice": [
								"решать задачу с помощью другой архитектуры",
								"поменять полносвязный слой нейронной сети VGG16 и переобучить всю нейронную сеть заново на своих данных",
								"поменять полносвязный слой нейронной сети VGG16 и переобучить полносвязный блок нейронной сети на своих данных",
								"построить свою нейронную сеть на основе архитектуры VGG16 и обучить ее"
							],
							"answer": [
								"поменять полносвязный слой нейронной сети VGG16 и переобучить полносвязный блок нейронной сети на своих данных"
							]
						},
						{
							"question": "Тонкая настройка нейронной сети – это",
							"multiple": false,
							"choice": [
								"такой подход к обучению нейронной сети, когда обучается только полносвязный блок, который отвечает за классификацию, чем обеспечивается минимальное вмешательство в процесс обучения",
								"такой подход к переносу обучения нейронной сети, при котором обучается не только полносвязный блок классификации, но и часть сверточных слоев, отвечающих за извлечение признаков из изображения",
								"обучение нейронной сети с очень маленьким шагом обучения, что позволяет подобрать оптимальные веса для модели"
							],
							"answer": [
								"такой подход к переносу обучения нейронной сети, при котором обучается не только полносвязный блок классификации, но и часть сверточных слоев, отвечающих за извлечение признаков из изображения"
							]
						},
						{
							"question": "Если мы хотим переобучить нейронную сеть под свою задачу, то мы должны заменить в ней",
							"multiple": false,
							"choice": [
								"сверточный блок",
								"все",
								"блок подвыборки",
								"полносвязный блок"
							],
							"answer": [
								"полносвязный блок"
							]
						},
						{
							"question": "Чтобы загрузить предварительно обученную нейронную сеть без полносвязного блока, нужно",
							"multiple": false,
							"choice": [
								"установить «model.trainable = False»",
								"установить «weights='imagenet'»",
								"установить «activation='relu'»",
								"установить «include_top=False»"
							],
							"answer": [
								"установить «include_top=False»"
							]
						},
						{
							"question": "Чтобы запретить обучаться весам загруженной предварительно обученной нейронной сети, нужно:",
							"multiple": false,
							"choice": [
								"установить «model.trainable = True»",
								"установить «include_top=False»",
								"установить «model.trainable = False»",
								"установить «weights='imagenet'»"
							],
							"answer": [
								"установить «model.trainable = False»"
							]
						},
						{
							"question": "Тонкая настройка при переносе обучения состоит в следующем",
							"multiple": false,
							"choice": [
								"обучить загруженную сеть с самого начала на своих данных, не используя веса, полученные на наборе данных ImageNet",
								"обучить загруженную сеть в том виде, как она есть, но на своих данных",
								"обучить загруженную сеть на своих данных, при этом заменив полносвязный блок и переобучив часть сверточных слоев",
								"обучить загруженную сеть на своих данных, при этом заменив полносвязный блок"
							],
							"answer": [
								"обучить загруженную сеть на своих данных, при этом заменив полносвязный блок и переобучив часть сверточных слоев"
							]
						},
						{
							"question": "Импортировать произвольную предварительно обученную нейронную сеть можно из",
							"multiple": false,
							"choice": [
								"tensorflow.keras.models",
								"tensorflow.keras.applications",
								"tensorflow.keras.trainable",
								"tensorflow.keras.nets"
							],
							"answer": [
								"tensorflow.keras.applications"
							]
						},
						{
							"question": "При замене полносвязного блока (классификатора) предварительно обученной нейронной сети в нем можно задать следующее количество слоев",
							"multiple": false,
							"choice": [
								"1",
								"2",
								"3",
								"сколько угодно"
							],
							"answer": [
								"сколько угодно"
							]
						}
					]
				}
			]
		},
		{
			"title": "Раздел 5. Нейронные сети для задачи анализа естественного языка",
			"topics": [
				{
					"title": "Тема 5.1. Нейронные сети для задач обработки естественного языка",
					"test": [
						{
							"question": "К этапам предварительной обработки текста относится",
							"multiple": true,
							"choice": [
								"классификация текста",
								"аннотирование текста",
								"очистка текста от знаков пунктуации",
								"разбиение текста на отдельные слова",
								"Z-нормализация",
								"лемматизация слов",
								"приведение текста к единому регистру"
							],
							"answer": [
								"очистка текста от знаков пунктуации",
								"разбиение текста на отдельные слова",
								"лемматизация слов",
								"приведение текста к единому регистру"
							]
						},
						{
							"question": "К задачам обработки естественного языка относятся",
							"multiple": true,
							"choice": [
								"распознавание изображений",
								"распознавание речи",
								"детектирование объектов",
								"выделение именованных сущностей",
								"информационный поиск",
								"машинный перевод",
								"предсказание цены товара",
								"синтез речи"
							],
							"answer": [
								"распознавание речи",
								"выделение именованных сущностей",
								"информационный поиск",
								"машинный перевод",
								"синтез речи"
							]
						},
						{
							"question": "Базовыми архитектурами для решения задач обработки естественного языка являются",
							"multiple": true,
							"choice": [
								"CNN2D",
								"LeNet5",
								"CNN1D",
								"ResNet",
								"Inception",
								"RNN"
							],
							"answer": [
								"CNN1D",
								"RNN"
							]
						},
						{
							"question": "Модификацией рекуррентной нейронной сети на основе долгой краткосрочной памяти является",
							"multiple": false,
							"choice": [
								"GRU",
								"BERT",
								"LSTM",
								"ELMO",
								"Transformer",
								"Xception",
								"ResNet"
							],
							"answer": [
								"LSTM"
							]
						},
						{
							"question": "Модификацией рекуррентной нейронной сети на основе механизма вентилей, регулирующих «память» нейронной сети",
							"multiple": false,
							"choice": [
								"ELMO",
								"Transformer",
								"GRU",
								"Xception",
								"ResNet",
								"BERT",
								"LSTM"
							],
							"answer": [
								"GRU"
							]
						},
						{
							"question": "Архитектура нейронной сети, основанная на двух рекуррентных блоках с долгой краткосрочной памятью. Один блок пропускает информацию слева направо, а второй – нет",
							"multiple": false,
							"choice": [
								"Transformer",
								"ELMO",
								"BERT",
								"LSTM",
								"GRU",
								"ResNet",
								"Xception"
							],
							"answer": [
								"ELMO"
							]
						},
						{
							"question": "Архитектура, состоящая из двух частей: encoder, decoder. Использует механизм внимания",
							"multiple": false,
							"choice": [
								"ELMO",
								"LSTM",
								"Transformer",
								"GRU",
								"Xception",
								"ResNet",
								"BERT"
							],
							"answer": [
								"Transformer"
							]
						},
						{
							"question": "Архитектура, которая сочетает в себе идеи ELMO и Transformer, а также идею обучения с подкреплением",
							"multiple": false,
							"choice": [
								"Xception",
								"Transformer",
								"BERT",
								"LSTM",
								"ResNet",
								"GRU",
								"ELMO"
							],
							"answer": [
								"BERT"
							]
						},
						{
							"question": "Частотный подход создания векторных представлений основан на",
							"multiple": false,
							"choice": [
								"«Bag of words»",
								"семантическом анализе",
								"частоте совместного употребления слов",
								"статистике"
							],
							"answer": [
								"«Bag of words»"
							]
						},
						{
							"question": "Размер словаря для текста «это было не вчера, это было не сегодня, это будет завтра»",
							"multiple": false,
							"choice": [
								"3",
								"7",
								"5",
								"11"
							],
							"answer": [
								"7"
							]
						},
						{
							"question": "В векторном представлении OHE длина вектора одного документа из набора в N документов равна",
							"multiple": false,
							"choice": [
								"100",
								"количеству слов в документе",
								"количеству слов во всех документах",
								"количеству документов",
								"длине словаря"
							],
							"answer": [
								"длине словаря"
							]
						},
						{
							"question": "Алгоритм, который учитывает не просто факт наличия слова в документе, но и частоту его появления как в отдельном документе, так и во всех документах в целом",
							"multiple": false,
							"choice": [
								"GloVe",
								"TF-IDF",
								"LDA",
								"OHE",
								"fasttext",
								"PLSA",
								"word2vec"
							],
							"answer": [
								"TF-IDF"
							]
						},
						{
							"question": "Алгоритмы, которые проводят «мягкую» кластеризацию слов, относя их одновременно к нескольким темам, но с разными вероятностями",
							"multiple": true,
							"choice": [
								"OHE",
								"TF-IDF",
								"LDA",
								"PLSA",
								"GloVe",
								"word2vec",
								"fasttext"
							],
							"answer": [
								"LDA",
								"PLSA"
							]
						},
						{
							"question": "Алгоритмы, которые учитывают контекст слов, или частей слов",
							"multiple": true,
							"choice": [
								"OHE",
								"TF-IDF",
								"LDA",
								"PLSA",
								"GloVe",
								"word2vec",
								"fasttext"
							],
							"answer": [
								"GloVe",
								"word2vec",
								"fasttext"
							]
						},
						{
							"question": "Различными подходами к обучению word2vec являются",
							"multiple": true,
							"choice": [
								"OHE",
								"fasttext",
								"CBOW",
								"word2vec",
								"SKIP-GRAM",
								"Bag of words"
							],
							"answer": [
								"CBOW",
								"SKIP-GRAM"
							]
						},
						{
							"question": "Слой в Keras, формирующий представления слова в виде вектора указанной размерности",
							"multiple": false,
							"choice": [
								"Dropout",
								"Flatten",
								"Embedding",
								"Conv1D",
								"Dense"
							],
							"answer": [
								"Embedding"
							]
						}
					]
				},
				{
					"title": "Тема 5.2. Одномерные сверточные нейронные сети",
					"test": [
						{
							"question": "Одномерные сверточные сети можно применять для анализа",
							"multiple": true,
							"choice": [
								"текстов",
								"изображений",
								"временных рядов",
								"табличных данных"
							],
							"answer": [
								"текстов",
								"временных рядов"
							]
						},
						{
							"question": "Дан входной вектор длиной 9, и к нему применяется свертка с размером ядра 7, на выходе будет вектор длиной",
							"multiple": false,
							"choice": [
								"9",
								"7",
								"3",
								"2"
							],
							"answer": [
								"3"
							]
						},
						{
							"question": "Для ядра с размером 15 нужно обучить следующее число параметров",
							"multiple": false,
							"choice": [
								"225",
								"30",
								"15",
								"5"
							],
							"answer": [
								"15"
							]
						},
						{
							"question": "Ко входному вектору длиной 12 применили слой свертки с двумя ядрами размером 3. Размер массива после применения свертки и слоя подвыборки будет",
							"multiple": false,
							"choice": [
								"2",
								"10",
								"5",
								"(5, 2)",
								"(10, 2)"
							],
							"answer": [
								"(5, 2)"
							]
						},
						{
							"question": "Ко входному вектору длиной 12 применили слой свертки с двумя ядрами размером 3. Размер массива после применения свертки и слоя глобальной подвыборки будет",
							"multiple": false,
							"choice": [
								"2",
								"10",
								"5",
								"(5, 2)",
								"(10, 2)"
							],
							"answer": [
								"2"
							]
						},
						{
							"question": "Преобразовать текстовую последовательность в числовой вектор можно с помощью класса",
							"multiple": false,
							"choice": [
								"Vectorizer",
								"Tokenizer",
								"Conv1D",
								"pad_sequences"
							],
							"answer": [
								"Tokenizer"
							]
						},
						{
							"question": "GlobalMaxPooling1D выбирает максимальный элемент из",
							"multiple": false,
							"choice": [
								"всех значений всех векторов после операции свертки",
								"каждой пары элементов вектора",
								"указанного количества значений в векторе",
								"каждого вектора после операции свертки"
							],
							"answer": [
								"каждого вектора после операции свертки"
							]
						},
						{
							"question": "Для приведения векторов всех текстов к одной длине используют следующий инструмент",
							"multiple": false,
							"choice": [
								"Tokenizer",
								"pad_sequences",
								"Vectorizer",
								"Conv1D"
							],
							"answer": [
								"pad_sequences"
							]
						}
					]
				},
				{
					"title": "Тема 5.3. Рекуррентные нейронные сети для задач обработки естественного языка",
					"test": [
						{
							"question": "Рекуррентные нейронные сети подходят для обработки данных следующих типов",
							"multiple": true,
							"choice": [
								"табличные данные",
								"аудиосигналы",
								"данные временных рядов",
								"изображения",
								"текстовые последовательности"
							],
							"answer": [
								"аудиосигналы",
								"данные временных рядов",
								"текстовые последовательности"
							]
						},
						{
							"question": "Рекуррентный слой в один момент времени принимает на вход",
							"multiple": true,
							"choice": [
								"входной вектор текущего слова",
								"входной вектор всего текста",
								"скрытое состояние предыдущего слоя",
								"матрицу изображения"
							],
							"answer": [
								"входной вектор текущего слова",
								"скрытое состояние предыдущего слоя"
							]
						},
						{
							"question": "Самые крупные недостатки рекуррентных нейронных сетей",
							"multiple": true,
							"choice": [
								"затухающий градиент",
								"невозможность извлечь контекст",
								"взрывной градиент",
								"требует на вход последовательность фиксированной длины",
								"невозможность распараллеливания вычислений"
							],
							"answer": [
								"затухающий градиент",
								"взрывной градиент",
								"невозможность распараллеливания вычислений"
							]
						},
						{
							"question": "Механизм, позволяющий сохранить, или частично или полностью обнулить информацию о состоянии (Ct-1) предыдущей ячейки",
							"multiple": false,
							"choice": [
								"input gate",
								"output gate",
								"forget gate",
								"renewal gate"
							],
							"answer": [
								"forget gate"
							]
						},
						{
							"question": "Механизм, позволяющий определить, какие данные (ht) отправить на выход текущей ячейки",
							"multiple": false,
							"choice": [
								"input gate",
								"output gate",
								"forget gate",
								"renewal gate"
							],
							"answer": [
								"output gate"
							]
						},
						{
							"question": "Отличиями ячейки GRU от LSTM являются",
							"multiple": true,
							"choice": [
								"более сложная архитектура",
								"меньшее количество входных данных",
								"меньшее количество выходных данных",
								"меньшее количество операций внутри одной ячейки памяти",
								"решение проблемы затухающего градиента"
							],
							"answer": [
								"меньшее количество входных данных",
								"меньшее количество выходных данных",
								"меньшее количество операций внутри одной ячейки памяти"
							]
						},
						{
							"question": "За то, будет ли рекуррентный слой возвращать последнее состояние или все скрытые состояния сети, отвечает параметр",
							"multiple": false,
							"choice": [
								"units",
								"input_length",
								"output_length",
								"return_sequences"
							],
							"answer": [
								"return_sequences"
							]
						},
						{
							"question": "Рекуррентными являются следующие слои",
							"multiple": true,
							"choice": [
								"Conv1D",
								"MaxPooling1D",
								"SimpleRNN",
								"Dense",
								"Embedding",
								"Conv2D",
								"GRU",
								"LSTM"
							],
							"answer": [
								"SimpleRNN",
								"GRU",
								"LSTM"
							]
						}
					]
				}
			]
		}
	]
}